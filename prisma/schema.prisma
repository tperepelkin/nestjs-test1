generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum RoleEnum {
  USER
  ENGENEER
  DISPATCHER
  OWNER
  PILOT
}

enum AircraftType {
  BVS
  PILOT
}

model Migrate {
  id    Int      @id @default(autoincrement())
  group RoleEnum @default(USER)
}

// Пользователь системы с возможностью логина и выполнения действий
model User {
  id            Int      @id @default(autoincrement())
  login         String   @unique(map: "login") @db.VarChar(50)
  password      String   @db.VarChar(200)
  wrongAttempts Int      @default(0) @map("wrong_attempts") @db.TinyInt
  actor         Actor?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  roles         Role[]   @relation("user_role")

  @@map("bvs_user")
}

model Role {
  id      Int     @id @default(autoincrement())
  name    String  @unique @db.VarChar(50)
  comment String? @db.VarChar(250)
  users   User[]  @relation("user_role")

  @@map("bvs_role")
}

model Adsb {
  dsi               Int     @default(0) @db.UnsignedSmallInt
  target_status     Int     @default(0) @db.UnsignedInt
  time_of_rep_trans Float   @default(0)
  latitude          Float   @default(0) @map("B")
  longitude         Float   @default(0) @map("L")
  heightFoots       Float   @default(0) @map("H_fl")
  heightGround      Float   @default(0) @map("H_gh")
  courseAngle       Float   @default(0) @map("angel_grd")
  targetNumber      Int     @default(0) @map("targ_num")
  targetAddress     Int     @default(0) @map("target_adress") @db.UnsignedInt
  targetIdent       String? @default("") @map("target_ident") @db.VarChar(25)
  squawk            Int     @default(0) @map("M3A_code") @db.UnsignedSmallInt
  emitCategory      Int     @default(0) @map("emit_cat") @db.UnsignedSmallInt
  aircrft_op_status Int     @default(0) @db.UnsignedSmallInt
  speed_air         Float   @default(0)
  speed_true        Float   @default(0)
  speed_grd         Float   @default(0)
  trd               Int     @default(0) @db.UnsignedSmallInt
  quality           Int     @default(0) @db.SmallInt
  time_update       Float   @default(0)
  flags             Int     @default(0) @db.UnsignedInt

  @@id([dsi, targetNumber, targetAddress])
  @@index([time_update], map: "time_update")
  @@map("ads_b")
}

model Mlat {
  dsi           Int    @default(0) @db.UnsignedSmallInt
  track_status  Int    @default(0) @db.UnsignedInt
  time_of_day   Float  @default(0)
  latitude      Float  @default(0) @map("B")
  longitude     Float  @default(0) @map("L")
  heightFoots   Float  @default(0) @map("H_fl")
  heightGround  Float  @default(0) @map("H_gh")
  H_mode_C      Float  @default(0)
  H_ms          Float  @default(0)
  targetNumber  Int    @default(0) @map("targ_num") @db.UnsignedSmallInt
  squawk        Int    @default(0) @map("M3A_code") @db.UnsignedSmallInt
  targetAddress Int    @default(0) @map("target_adress") @db.UnsignedInt
  targetIdent   String @default("") @map("target_ident") @db.VarChar(25)
  trd           Int    @default(0) @db.UnsignedInt
  velocityX     Float  @default(0) @map("VX")
  velocityY     Float  @default(0) @map("VY")
  ACAS          BigInt @default(0) @db.UnsignedBigInt
  BDS           Bytes? @db.Blob
  VFI           Int    @default(0) @db.TinyInt
  DOPx          Float  @default(0)
  DOPy          Float  @default(0)
  contrib_dev   Bytes? @db.Blob
  time_update   Float  @default(0)
  flags         Int    @default(0) @db.UnsignedInt

  @@id([dsi, targetNumber])
  @@index([time_update], map: "time_update")
  @@map("mlat")
}

model Psr {
  dsi           Int   @default(0) @db.UnsignedSmallInt
  targetAddress Int   @default(0) @map("track_status") @db.UnsignedInt
  time_of_day   Float @default(0)
  latitude      Float @default(0) @map("B")
  longitude     Float @default(0) @map("L")
  heightGround  Float @default(0) @map("H_ms")
  targetNumber  Int   @default(0) @map("targ_num") @db.UnsignedSmallInt
  trd           Int   @default(0) @db.UnsignedInt
  velocityX     Float @default(0) @map("VX")
  velocityY     Float @default(0) @map("VY")
  time_update   Float @default(0)
  flags         Int   @default(0) @db.UnsignedInt

  @@id([dsi, targetNumber])
  @@index([time_update], map: "time_update")
  @@map("psr")
}

model Zone {
  id              Int            @id @default(autoincrement()) @db.UnsignedInt
  name            String         @db.VarChar(200)
  icao            String?        @db.VarChar(10)
  flags           String?        @db.VarChar(10)
  isRoundTheClock Boolean
  regulations     String?        @db.VarChar(200)
  type            String?        @db.VarChar(10)
  belonging       String?        @db.VarChar(50)
  milRcId         Int?           @db.UnsignedInt
  boundaries      ZoneBoundary[]

  @@map("zone")
}

model ZoneBoundary {
  id        Int         @id @default(autoincrement()) @db.UnsignedInt
  heightMin Int         @db.UnsignedInt
  heightMax Int         @db.UnsignedInt
  zoneId    Int         @db.UnsignedInt
  zone      Zone        @relation(fields: [zoneId], references: [id], onDelete: Cascade, map: "zoneBoundary_ibfk_1")
  points    ZonePoint[]

  @@index([zoneId], map: "zoneId")
  @@map("zoneBoundary")
}

model ZonePoint {
  id           Int          @id @default(autoincrement()) @db.UnsignedInt
  latitude     Float
  longitude    Float
  boundaryId   Int          @db.UnsignedInt
  zoneBoundary ZoneBoundary @relation(fields: [boundaryId], references: [id], onDelete: Cascade, map: "zonePoint_ibfk_1")

  @@index([boundaryId], map: "boundaryId")
  @@map("zonePoint")
}

model Airfield {
  id                Int          @id @default(autoincrement())
  code              String?      @db.VarChar(4)
  name              String       @db.VarChar(50)
  type              String       @db.VarChar(10)
  latitude          Float        @map("lat")
  longitude         Float        @map("lon")
  militaryZoneId    Int?         @db.UnsignedInt
  militaryZoneName  String?      @db.VarChar(50)
  workAboutSchedule String?      @db.VarChar(500)
  permission        Permission[] @relation("permission_airfield")

  @@unique([code, name])
  @@map("airfield")
}

model FileInfo {
  id             Int       @id @default(autoincrement())
  name           String    @unique(map: "name") @db.VarChar(100)
  fileSize       Int       @db.UnsignedInt
  lastDateUpdate DateTime  @db.DateTime(0)
  checkSum       DateTime? @db.DateTime(0)

  @@map("file_info")
}

enum ActorType {
  USER
  ORGANIZATION

  @@map("Actor")
}

// Контакты хранимого в системе физлица или юрлица
model Contact {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(50)
  value   String @db.VarChar(250)
  actorId Int?
  actor   Actor? @relation(fields: [actorId], references: [id])

  @@map("contact")
}

// Физическое или юридическое лицо, хранимое в системе
model Actor {
  id           Int          @id @default(autoincrement())
  type         ActorType
  // Физлицо или юрлицо могут также пилотами или владельцами воздушного судна
  individualId Int?         @unique
  individual   Individual?  @relation(fields: [individualId], references: [id])
  entityId     Int?         @unique
  entity       Entity?      @relation(fields: [entityId], references: [id])
  userId       Int?         @unique
  user         User?        @relation(fields: [userId], references: [id])
  contacts     Contact[]
  permissions  Permission[] @relation("permission_actor")

  @@map("actor")
}

// Физическое лицо. Может ссылаться на сущность "Пользователь в системе".
model Individual {
  id             Int          @id @default(autoincrement())
  firstName      String       @map("first_name") @db.VarChar(100) // Имя
  lastName       String       @map("last_name") @db.VarChar(200) // Фамилия
  patronimyc     String       @db.VarChar(100) // Отчество
  passportSeries String       @db.Char(4) // Серия паспорта
  passportNumber String       @db.Char(6) // Номер паспорта
  address        String       @db.VarChar(500) // Адрес регистрации по месту жительства
  passportSource String       @db.VarChar(500) // Кем выдан паспорт
  actor          Actor?
  permissions    Permission[] @relation("permission_pilot")

  @@unique([passportSeries, passportNumber])
  @@map("individual")
}

// Юридическое лицо
model Entity {
  id               Int      @id @default(autoincrement())
  name             String
  inn              String   @db.VarChar(12) // ИНН ИП или организации
  ogrn             String   @db.Char(13) // ОГРН организации
  registrationDate DateTime
  address          String   @db.VarChar(400) // Адрес регистрации
  actor            Actor?

  @@map("legal_entity")
}

model Aircraft {
  id             Int          @id @default(autoincrement())
  modelName      String
  aircraftNumber String       @unique
  aircraftType   AircraftType @default(BVS)
  permissions    Permission[] @relation("permissions_aircrafts")

  @@map("aircraft")
}

// model Restriction {
//   id         Int @id @default(autoincrement())
//   name       String @unique
// }

model Permission {
  id               Int          @id @default(autoincrement())
  // Номер разрешения 
  permissionNumber Int?         @unique
  //Список воздушных судов, на которые выдано разрешение
  aircrafts        Aircraft[]   @relation("permissions_aircrafts")
  // Список пилотов
  pilots           Individual[] @relation("permission_pilot")
  airfields        Airfield[]   @relation("permission_airfield")
  // Кому выдано разрешение
  recipientId      Int
  recipient        Actor        @relation("permission_actor", fields: [recipientId], references: [id])
  // Цель полёта
  target           String       @db.VarChar(250)
  // Описание района полёта
  zoneDescription  String?      @db.VarChar(500)
  // Дата выдачи разрешения
  createDate       DateTime     @default(now())
  // Дата начала действия разрешения
  startDate        DateTime     @default(now())
  // Дата окончания действия разрешения
  endDate          DateTime?
  //   // После отзыва разрешения не удаляем запись из таблицы, а устанавливаем соответствующий флаг
  isObsoleted      Boolean      @default(false)

  @@map("permissions")
}
